#include "CADe.h"
#include "CADe_Private.h"

/////////////////////////////////////////////////////////////////////////////////////////

CADe::CADe() : m_pPrivate{ std::make_unique<cePrivate>() }
{

}

/////////////////////////////////////////////////////////////////////////////////////////

CADe::~CADe()
{

}

/////////////////////////////////////////////////////////////////////////////////////////

void CADe::addTemplate(std::string strPath, uint16_t nTemplateSize)
{
	m_pPrivate->m_infoTemplates.emplace_back(strPath,nTemplateSize);
}

/////////////////////////////////////////////////////////////////////////////////////////

void CADe::addImageFile(std::string strPath)
{
	m_pPrivate->m_imageFiles.emplace_back(strPath);
}

/////////////////////////////////////////////////////////////////////////////////////////

void CADe::setMaximumScores(uint8_t nScores)
{
	m_pPrivate->m_nMaximumScores = nScores;
}

/////////////////////////////////////////////////////////////////////////////////////////

void CADe::enableDebugMode(bool bDebug)
{
	m_pPrivate->m_bDebugMode = bDebug;
}

/////////////////////////////////////////////////////////////////////////////////////////

bool CADe::excute()
{
	bool retVal = m_pPrivate->hasImages() && m_pPrivate->hasTemplates();

	if (retVal) {
		for (const auto& strImage : m_pPrivate->m_imageFiles) {
			retVal = m_pPrivate->processImage(strImage);
			if (!retVal) {
				break;
			}
		}
	}

	return retVal;
}

/////////////////////////////////////////////////////////////////////////////////////////

std::string CADe::getErrorMessages() const
{
	return m_pPrivate->m_StrErrorMessages;
}

/////////////////////////////////////////////////////////////////////////////////////////
